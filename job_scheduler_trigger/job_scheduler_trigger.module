<?php
// $Id: job_scheduler.module,v 1.6 2010/09/28 22:20:42 jreyero Exp $

/**
 * @file
 * job scheduler module.
 */

/**
 * Implementation of hook_menu()
 */
function job_scheduler_trigger_menu() {
  $items['admin/config/system/job_scheduler'] = array(
    'title' => 'Trigger scheduler',
    'description' => 'Configure timely triggers',
    'page callback' => 'job_scheduler_trigger_admin_overview',
    'access arguments' => array('administer site configuration'),
    'file' => 'job_scheduler_trigger.admin.inc',
  );
  $items['admin/config/system/job_scheduler/add'] = array(
    'title' => 'Trigger scheduler',
    'description' => 'Configure timely triggers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('job_scheduler_trigger_edit_form', NULL),
    'access arguments' => array('administer site configuration'),
    'file' => 'job_scheduler_trigger.admin.inc',
  );
  $items['admin/config/system/job_scheduler/%job_scheduler_trigger'] = array(
    'title' => 'Trigger scheduler',
    'description' => 'Configure timely triggers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('job_scheduler_trigger_edit_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'job_scheduler_trigger.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_trigger_info().
 */
function job_scheduler_trigger_trigger_info() {
  $triggers = array();
  foreach (job_scheduler_trigger_list() as $trigger) {
    $label = $trigger->status ? $trigger->title : $trigger->title . ' ' . t('(Disabled)');
    $triggers['job_scheduler'][$trigger->hook] = array(
      'label' => $label,
    );
  }
  return $triggers;
}

/**
 * Implementation of hook_job_scheduler_info()
 */
function job_scheduler_trigger_cron_job_scheduler_info() {
  foreach (job_scheduler_trigger_list() as $trigger) {
    if ($trigger->status) {
      $jobs[$trigger->trid] = array('id' => $trigger->trid, 'type' => $trigger->hook, 'crontab' => $trigger->crontab, 'periodic' => TRUE);
    }
  }
  if (!empty($jobs)) {
    $scheduler['job_scheduler_trigger'] = array(
      'worker callback' => 'job_scheduler_trigger_worker',
      'auto' => TRUE,
      'jobs' => $jobs,
    );
    return $scheduler;
  }
}

/**
 * Get job list for job scheduler
 */
function job_scheduler_trigger_list() {
  return db_select('job_scheduler_trigger', 't')
    ->fields('t')
    ->orderBy('status', 'DESC')
    ->execute()->fetchAll();
}

/**
 * Fire up a scheduled trigger
 */
function job_scheduler_trigger_worker($job) {
  // Mark last time triggered for the records
  db_update('job_scheduler_trigger')
    ->fields(array('last' => REQUEST_TIME))
    ->condition('trid', $job['id'])
    ->execute();
  $aids = trigger_get_assigned_actions($job['type']);
  $context = array(
    'group' => 'scheduler',
    'hook' => $job['type'],
    'job' => $job,
  );
  // Scheduler's object is the job from job_scheduler
  $object = (object)$job;
  actions_do(array_keys($aids), $object, $context);  
}

/**
 * Menu loader
 */
function job_scheduler_trigger_load($trid) {
  return db_select('job_scheduler_trigger', 't')
    ->fields('t')
    ->condition('trid', $trid)
    ->execute()->fetchObject();
}